---
const { lang } = Astro.props;
---

<div class="lang-dropdown" id="langDropdown">
  <button class="lang-btn" id="langBtn">
    <span id="currentLang">{lang === "en" ? "English" : "中文"}</span>
    <i class="fa-solid fa-chevron-down"></i>
  </button>
  <div class="lang-menu hidden bg-white dark:bg-gray-800" id="langMenu">
    <div class="lang-item" data-lang="en">English</div>
    <div class="lang-item" data-lang="zh">中文</div>
  </div>
</div>

<script>
  // 初始化语言
  const html = document.documentElement;
  let currentLang = html.getAttribute("lang");
  const langBtn = document.getElementById("langBtn");
  const currentLangSpan = langBtn?.querySelector("#currentLang");
  const langMenu = document.getElementById("langMenu");
  const langItems = document.querySelectorAll(".lang-item");
  // 初始化语言显示
  function initLanguage() {
    updateLangText();
    if (currentLangSpan) {
      currentLangSpan.textContent = currentLang === "en" ? "English" : "中文";
    }
  }

  // 更新页面文本
  function updateLangText() {
    const elements = document.querySelectorAll(
      "[data-lang-en], [data-lang-zh]",
    );
    elements.forEach((element) => {
      const enText = element.getAttribute("data-lang-en");
      const zhText = element.getAttribute("data-lang-zh");
      element.textContent = currentLang === "en" ? enText : zhText;
    });
  }

  // 语言切换逻辑
  function toggleLanguage(lang: string) {
    currentLang = lang;
    document.documentElement.lang = lang;
    if (currentLangSpan) {
      currentLangSpan.textContent = currentLang === "en" ? "English" : "中文";
    }
    updateLangText();
    langMenu?.classList.add("hidden");
  }

  // 下拉菜单交互
  langBtn?.addEventListener("click", () => {
    langMenu?.classList.toggle("hidden");
  });

  langItems.forEach((item) => {
    item.addEventListener("click", () => {
      if (item instanceof HTMLElement && item.dataset.lang) {
        toggleLanguage(item.dataset.lang);
      }
    });
  });

  // 点击外部关闭菜单
  document.addEventListener("click", (e: MouseEvent) => {
    const target = e.target;
    if (
      !target ||
      (target instanceof HTMLElement && !target.closest(".lang-dropdown"))
    ) {
      langMenu?.classList.add("hidden");
    }
  });

  // 初始化
  initLanguage();
</script>

<style>
  /* 语言切换下拉菜单样式（参考 Vite 官网） */
  .lang-dropdown {
    position: relative;
  }

  .lang-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    font-weight: 500;
    line-height: 1.25rem;
    border-radius: 0.375rem;
    cursor: pointer;
    transition:
      background-color 0.2s,
      color 0.2s;
  }

  .lang-btn:hover {
    background-color: var(--card-bg);
    color: #4560ff;
  }

  .lang-menu {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    min-width: 8rem;
    padding: 0.5rem 0;
    border-radius: 0.375rem;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
    z-index: 100;
    animation: fadeIn 0.3s ease-in-out;
  }

  .lang-item {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: var(--menu-text);
    cursor: pointer;
    transition:
      background-color 0.2s,
      color 0.2s;
  }

  .lang-item:hover {
    background-color: #f3f4f6;
    color: #4560ff;
  }
</style>
